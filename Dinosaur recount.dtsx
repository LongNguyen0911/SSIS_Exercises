<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/13/2021 4:18:50 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="VN-PF2MFATG"
  DTS:CreatorName="EAD\lnguyen284"
  DTS:DTSID="{CA6E7AE5-8878-4962-855A-2D6F3D8AFC1C}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.170"
  DTS:LocaleID="1033"
  DTS:ObjectName="Dinosaur recount"
  DTS:PackageType="5"
  DTS:VersionBuild="5"
  DTS:VersionGUID="{63CF0147-5236-4F22-98FB-8A8B5304822F}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Dino File]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{C266C73D-E616-4975-8DFF-6ACEA6E72693}"
      DTS:ObjectName="Dino File">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="0"
          DTS:ConnectRetryInterval="0"
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\lnguyen284\OneDrive - DXC Production\Documents\SSIS_Exercises\Dino File.xlsx;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0873681F-6A88-4DD9-84E1-EB1B250022B1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="DinoCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Import dinosaurs from Excel Workbook"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{DA64E728-90D3-43A4-BBA6-CC0D09CD45B1}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Import dinosaurs from Excel Workbook"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs"
              componentClassID="Microsoft.ExcelSource"
              contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Excel Source"
              name="List of dinosaurs"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">Specimens$</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mapping from parameters in the SQL command to variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[Dino File]"
                  connectionManagerRefId="Package.ConnectionManagers[Dino File]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output]"
                  name="Excel Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Name]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Name]"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Name]"
                      name="Name"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Meaning of Name]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Meaning of Name]"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Meaning of Name]"
                      name="Meaning of Name"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Pronunciation]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Pronunciation]"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Pronunciation]"
                      name="Pronunciation"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Period]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Period]"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Period]"
                      name="Period"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Diet]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Diet]"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Diet]"
                      name="Diet"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Length (m)]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Length (m)]"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Length (m)]"
                      name="Length (m)"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Height  (m)]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Height  (m)]"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Height  (m)]"
                      name="Height  (m)"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Mass kg]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Mass kg]"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Mass kg]"
                      name="Mass kg"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[No# of feet it walked on?]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[No# of feet it walked on?]"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[No# of feet it walked on?]"
                      name="No# of feet it walked on?"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Hip Type]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Hip Type]"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Hip Type]"
                      name="Hip Type"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Group]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Group]"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].Columns[Group]"
                      name="Group"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Name]"
                      dataType="wstr"
                      length="255"
                      name="Name" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Meaning of Name]"
                      dataType="wstr"
                      length="255"
                      name="Meaning of Name" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Pronunciation]"
                      dataType="wstr"
                      length="255"
                      name="Pronunciation" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Period]"
                      dataType="wstr"
                      length="255"
                      name="Period" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Diet]"
                      dataType="wstr"
                      length="255"
                      name="Diet" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Length (m)]"
                      dataType="r8"
                      name="Length (m)" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Height  (m)]"
                      dataType="r8"
                      name="Height  (m)" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Mass kg]"
                      dataType="r8"
                      name="Mass kg" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[No# of feet it walked on?]"
                      dataType="r8"
                      name="No# of feet it walked on?" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Hip Type]"
                      dataType="wstr"
                      length="255"
                      name="Hip Type" />
                    <externalMetadataColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output].ExternalColumns[Group]"
                      dataType="wstr"
                      length="255"
                      name="Group" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output]"
                  isErrorOut="true"
                  name="Excel Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Name]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Name]"
                      name="Name" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Meaning of Name]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Meaning of Name]"
                      name="Meaning of Name" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Pronunciation]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Pronunciation]"
                      name="Pronunciation" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Period]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Period]"
                      name="Period" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Diet]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Diet]"
                      name="Diet" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Length (m)]"
                      dataType="r8"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Length (m)]"
                      name="Length (m)" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Height  (m)]"
                      dataType="r8"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Height  (m)]"
                      name="Height  (m)" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Mass kg]"
                      dataType="r8"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Mass kg]"
                      name="Mass kg" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[No# of feet it walked on?]"
                      dataType="r8"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[No# of feet it walked on?]"
                      name="No# of feet it walked on?" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Hip Type]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Hip Type]"
                      name="Hip Type" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Group]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[Group]"
                      name="Group" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Import dinosaurs from Excel Workbook\Row Count"
              componentClassID="Microsoft.RowCount"
              contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
              name="Row Count">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable to hold the row count."
                  name="VariableName">User::DinoCount</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Import dinosaurs from Excel Workbook\Row Count.Inputs[Row Count Input 1]"
                  hasSideEffects="true"
                  name="Row Count Input 1">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Import dinosaurs from Excel Workbook\Row Count.Outputs[Row Count Output 1]"
                  name="Row Count Output 1"
                  synchronousInputId="Package\Import dinosaurs from Excel Workbook\Row Count.Inputs[Row Count Input 1]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Import dinosaurs from Excel Workbook.Paths[Excel Source Output]"
              endId="Package\Import dinosaurs from Excel Workbook\Row Count.Inputs[Row Count Input 1]"
              name="Excel Source Output"
              startId="Package\Import dinosaurs from Excel Workbook\List of dinosaurs.Outputs[Excel Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Show number found"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{126160AE-3DB0-4755-A44D-37A250514B93}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Show number found"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_a020e010188c47f6b3df903b3e2a9bd1"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::DinoCount">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_a020e010188c47f6b3df903b3e2a9bd1")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_a020e010188c47f6b3df903b3e2a9bd1")]
[assembly: AssemblyCopyright("Copyright @  2021")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_a020e010188c47f6b3df903b3e2a9bd1
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here

			Dts.TaskResult = (int)ScriptResults.Success;
            MessageBox.Show("There are "+Dts.Variables["User::DinoCount"].Value.ToString()+" dinosaurs");
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_a020e010188c47f6b3df903b3e2a9bd1</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_a020e010188c47f6b3df903b3e2a9bd1</msb:DisplayName>
    <msb:ProjectId>{231F697F-362C-4135-B447-D9DCB5F4F759}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_a020e010188c47f6b3df903b3e2a9bd1.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a020e010188c47f6b3df903b3e2a9bd1.Properties.Settings.get_Default():ST_a020e010188c47f6b3df903b3e2a9bd1.Properties.Sett" +
    "ings")]

namespace ST_a020e010188c47f6b3df903b3e2a9bd1.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_a020e010188c47f6b3df903b3e2a9bd1.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{84D213A6-64B4-40AF-BAE3-7002920F67BD}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_a020e010188c47f6b3df903b3e2a9bd1</RootNamespace>
    <AssemblyName>ST_a020e010188c47f6b3df903b3e2a9bd1</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a020e010188c47f6b3df903b3e2a9bd1.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a020e010188c47f6b3df903b3e2a9bd1.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_a020e010188c47f6b3df903b3e2a9bd1.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_a020e010188c47f6b3df903b3e2a9bd1.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_a020e010188c47f6b3df903b3e2a9bd1.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_a020e010188c47f6b3df903b3e2a9bd1.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMsit2EAAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAANi4A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAOQtAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAPA4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAY
LgAAAAAAAEgAAAACAAUABCEAACgMAAABAAAAAAAAACwtAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwAwBBAAAAAAAAAAIoEAAAChZvEQAACnIBAABwAigQAAAK
bxIAAApyFwAAcG8TAAAKbxQAAApvFQAACnI3AABwKBYAAAooFwAACiYqHgIoGAAACioeAigZAAAK
Kq5+AQAABC0eck0AAHDQAwAAAigaAAAKbxsAAApzHAAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIA
AAQqGn4DAAAEKh4CKB0AAAoqLnMIAAAGgAMAAAQqAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5
AAAAAAUAbAAAAOgDAAAjfgAAVAQAAJQFAAAjU3RyaW5ncwAAAADoCQAAwAAAACNVUwCoCgAAEAAA
ACNHVUlEAAAAuAoAAHABAAAjQmxvYgAAAAAAAAACAAABVx2gAQkDAAAA+gEzABYAAAEAAAAgAAAA
BQAAAAYAAAAJAAAAAQAAAB0AAAACAAAAEAAAAAIAAAADAAAABAAAAAEAAAAFAAAAAQAAAAEAAAAA
AHUDAQAAAAAABgAlAkUEBgC0AkUEBgBxATIEDwC5BAAABgCeAfMDBgAIAvMDBgDpAfMDBgCbAvMD
BgBFAvMDBgBeAvMDBgC1AfMDBgDQAeICCgB5AiQDCgDwACQDBgCtA6YDBgBUATIEBgBIBaYDBgAV
BGUEBgAFBN4DDgAkAV8DDgCFAV8DDgAMAckDBgA5AUUECgBNAyQDEgD7BJsAEgBuAJsABgD+AqYD
FgB8BQ4FFgBbBQ4FBgC7AKYDBgB3AKYDBgCLBfMDAAAAACUAAAAAAAEAAQABABAAvgMBADkAAQAB
AAAAEABsBMgERQABAAMAAAEQAAUFyARZAAMABwADAQAAMwUAAD0ABAAKABEAsgNxABEA4AB1ABEA
XgB5AAYGTQB9AFaAIwWAAFaAwACAAFAgAAAAAIYAxAMGAAEAnSAAAAAAhhglBAYAAQClIAAAAACD
GCUEBgABAK0gAAAAAJMIEQSEAAEA2SAAAAAAkwjIAIkAAQDgIAAAAACTCNQAjgABAOggAAAAAJYI
TwWUAAIA7yAAAAAAhhglBAYAAgD3IAAAAACRGCsEmQACAAAAAQDcAgkAJQQBABEAJQQGABkAJQQK
ACkAJQQQADEAJQQQADkAJQQQAEEAJQQQAEkAJQQQAFEAJQQQAFkAJQQQAGEAJQQQAGkAJQQGAIEA
JQQGAKkAJQQVALkAJQQGAHEAKwUbAMEAaAUBAMEA9wQgAMkAnQMlANEA0gIrAIkA/AIvANkAQQUz
AOEAdwU6AHEAJQQGAIkAJQQGAPEAiQBAAPEAhwVHAJEAJQRNALEAJQQGAAgAFABnAAgAGABsACkA
cwDUAC4ACwCsAC4AEwC1AC4AGwDUAC4AIwDdAC4AKwAGAS4AMwAGAS4AOwAGAS4AQwDdAC4ASwAM
AS4AUwAGAS4AWwAjAUMAYwBsAEkAcwDUAGEAewBsAGMAawBsAAMAAQAEAAMAAAAVBJ0AAADoAKIA
AABTBacAAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAABRHx18AAAAAAAAAQAAAAQAAAAA
AAAAAAAAAFUAVQAAAAAADwAAAAAAAAAAAAAAXgAFAwAAAAAEAAAAAAAAAAAAAABVAKYDAAAAAA8A
AAAAAAAAAAAAAF4ALgAAAAAABAAAAAAAAAAAAAAAVQAOBQAAAAAAAAAAAQAAAHYEAAAFAAIAAAAA
U1RfYTAyMGUwMTAxODhjNDdmNmIzZGY5MDNiM2UyYTliZDEAPE1vZHVsZT4ATWljcm9zb2Z0LlNx
bFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAZGVmYXVsdEluc3RhbmNlAFZhcmlh
YmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlJ1bnRpbWUAVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291
cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5n
c0Jhc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVi
dWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dz
YWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0
cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRy
aWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25z
QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJp
YnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0
cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBTeXN0
ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0
VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVj
dE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF9hMDIwZTAxMDE4OGM0N2Y2YjNkZjkwM2Iz
ZTJhOWJkMS5kbGwAZ2V0X0l0ZW0AU3lzdGVtAEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBT
eXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlv
bgBDdWx0dXJlSW5mbwBnZXRfUmVzb3VyY2VNYW5hZ2VyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlh
Z25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2Vz
AFNUX2EwMjBlMDEwMTg4YzQ3ZjZiM2RmOTAzYjNlMmE5YmQxLlByb3BlcnRpZXMuUmVzb3VyY2Vz
LnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9hMDIwZTAxMDE4OGM0N2Y2YjNkZjkwM2IzZTJh
OWJkMS5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAU3lzdGVtLldpbmRvd3MuRm9y
bXMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAQ29uY2F0AE9iamVjdABnZXRfRGVmYXVs
dABEaWFsb2dSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU2hvdwBNZXNzYWdlQm94AGdldF9Bc3NlbWJs
eQAAFVQAaABlAHIAZQAgAGEAcgBlACAAAB9VAHMAZQByADoAOgBEAGkAbgBvAEMAbwB1AG4AdAAA
FSAAZABpAG4AbwBzAGEAdQByAHMAAHFTAFQAXwBhADAAMgAwAGUAMAAxADAAMQA4ADgAYwA0ADcA
ZgA2AGIAMwBkAGYAOQAwADMAYgAzAGUAMgBhADkAYgBkADEALgBQAHIAbwBwAGUAcgB0AGkAZQBz
AC4AUgBlAHMAbwB1AHIAYwBlAHMAAAALRa/ByTOIS5hyD6yk3srQAAQgAQEIAyAAAQUgAQEREQQg
AQEOBSABARFRBCAAEmEEIAASZQUgARJpHAMgABwDIAAOBgADDg4ODgUAARF1DgYAARJ5EX0FIAAS
gIEHIAIBDhKAgQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJJAwYSTQMGEhACBggDBhEU
BAAAEkkEAAASTQUAAQESTQQAABIQAwAAAQQIABJJBAgAEk0ECAASEAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYTAyMGUwMTAxODhjNDdmNmIz
ZGY5MDNiM2UyYTliZDEAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMQAASQEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29y
ayA0LjcAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIs
IG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9r
ZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIA
AAAAAAAAAAAAAFBBRFBBRFC0AAAADC4AAAAAAAAAAAAAJi4AAAAgAAAAAAAAAAAAAAAAAAAAAAAA
AAAAABguAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQAdfFEfAAABAB18UR8/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfAGEAMAAyADAAZQAwADEAMAAxADgAOABjADQANwBmADYAYgAzAGQAZgA5ADAAMwBi
ADMAZQAyAGEAOQBiAGQAMQAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA4ADAAMQA3AC4AMwAxADcANwAzAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAVABfAGEAMAAyADAAZQAwADEAMAAxADgAOABjADQANwBmADYAYgAzAGQAZgA5ADAAMwBiADMA
ZQAyAGEAOQBiAGQAMQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAxAAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8AYQAwADIAMABlADAAMQAwADEAOAA4AGMANAA3AGYANgBiADMAZABmADkA
MAAzAGIAMwBlADIAYQA5AGIAZAAxAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfAGEAMAAyADAAZQAwADEAMAAxADgAOABjADQANwBmADYAYgAzAGQAZgA5ADAA
MwBiADMAZQAyAGEAOQBiAGQAMQAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4AOAAwADEANwAuADMAMQA3ADcAMwAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4AOAAwADEANwAuADMAMQA3ADcAMwAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAA4PgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{306E7FB9-26CE-4165-858B-EBA9A681ABBE}"
      DTS:From="Package\Import dinosaurs from Excel Workbook"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Show number found" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="264,42.6666666666667"
          Id="Package\Import dinosaurs from Excel Workbook"
          TopLeft="24.3749996367838,72.1499987098575" />
        <NodeLayout
          Size="174.666666666667,42.6666666666667"
          Id="Package\Show number found"
          TopLeft="76.8749988544728,176.799996838569" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="160.291665912296,114.816665376524">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,61.9833314620455"
              Start="0,0"
              End="0,54.4833314620455">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,54.4833314620455" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="Use a row count and a variable to show number of records in script."
          ParentId="Package"
          FontInfo="{assembly:Null}"
          Size="169.333333333334,72"
          Id="2a8bb8a6-2bba-4ce7-bdd9-c8f79f2ecab0"
          TopLeft="347.624999022111,82.0333324267467" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Import dinosaurs from Excel Workbook">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="156,42.6666666666667"
          Id="Package\Import dinosaurs from Excel Workbook\List of dinosaurs"
          TopLeft="214.249996889383,90.6499984773994" />
        <NodeLayout
          Size="131.333333333334,42.6666666666667"
          Id="Package\Import dinosaurs from Excel Workbook\Row Count"
          TopLeft="226.249996628612,183.299996722341" />
        <EdgeLayout
          Id="Package\Import dinosaurs from Excel Workbook.Paths[Excel Source Output]"
          TopLeft="292.083330092331,133.316665144066">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,49.9833315782745"
              Start="0,0"
              End="0,42.4833315782745">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,42.4833315782745" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Import dinosaurs from Excel Workbook\List of dinosaurs">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>